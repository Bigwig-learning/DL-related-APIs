function,type,api-define,api-find
Android: Load images  % Bitmap  https://developer.android.com/reference/android/graphics/BitmapFactory,SOURCE,"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String, android.graphics.BitmapFactory$Options)>",<Landroid/graphics/BitmapFactory;->decodeFile(Ljava/lang/String; Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;>
,SOURCE,<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>,<Landroid/graphics/BitmapFactory;->decodeFile(Ljava/lang/String;)Landroid/graphics/Bitmap;>
,SOURCE,"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options)>",<Landroid/graphics/BitmapFactory;->decodeResourceStream(Landroid/content/res/Resources; Landroid/util/TypedValue; Ljava/io/InputStream; Landroid/graphics/Rect; Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;>
,SOURCE,<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(java.io.InputStream)>,<Landroid/graphics/BitmapFactory;->decodeResourceStream(Ljava/io/InputStream;)Landroid/graphics/Bitmap;>
,SOURCE,"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options)>",<Landroid/graphics/BitmapFactory;->decodeResourceStream(Ljava/io/InputStream; Landroid/graphics/Rect; Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;>
,SOURCE,"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources, int, android.graphics.BitmapFactory$Options)>",<Landroid/graphics/BitmapFactory;->decodeResource(Landroid/content/res/Resources; I Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;>
,SOURCE,"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources, int)>",<Landroid/graphics/BitmapFactory;->decodeResource(Landroid/content/res/Resources; I)Landroid/graphics/Bitmap;>
,SOURCE,"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[], int, int, android.graphics.BitmapFactory$Options)>",<Landroid/graphics/BitmapFactory;->decodeByteArray([B I I Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;>
,SOURCE,"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[], int, int)> ",<Landroid/graphics/BitmapFactory;->decodeByteArray([B I I)Landroid/graphics/Bitmap;>
,SOURCE,"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options)>",<Landroid/graphics/BitmapFactory;->decodeStream(Ljava/io/InputStream; Landroid/graphics/Rect; Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;>
,SOURCE,<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>,<Landroid/graphics/BitmapFactory;->decodeStream(Ljava/io/InputStream;)Landroid/graphics/Bitmap;>
,SOURCE,"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor, android.graphics.Rect, android.graphics.BitmapFactory$Options)> ",<Landroid/graphics/BitmapFactory;->decodeFileDescriptor(Ljava/io/FileDescriptor; Landroid/graphics/Rect; Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;>
,SOURCE,<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)>,<Landroid/graphics/BitmapFactory;->decodeFileDescriptor(Ljava/io/FileDescriptor;)Landroid/graphics/Bitmap;>
Android: process File,SOURCE,"<androidx.core.content.FileProvider: android.net.Uri getUriForFile(android.content.Context, java.lang.String, java.io.File)> ",<Landroidx/core/content/FileProvider;->getUriForFile(Landroid/content/Context; Ljava/lang/String; Ljava/io/File;)Landroid/net/Uri;>
,SOURCE,<android.net.Uri: android.net.Uri fromFile(java.io.File)>,<Landroid/net/Uri;->fromFile(Ljava/io/File;)Landroid/net/Uri;>
Glide: Load images & Take pictures,SOURCE,<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestBuilder load(android.graphics.Bitmap)>,<Lcom/bumptech/glide/RequestManager;->load(Landroid/graphics/Bitmap;)Lcom/bumptech/glide/RequestBuilder;>
,SOURCE,<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestBuilder load(android.graphics.drawable.Drawable)>,<Lcom/bumptech/glide/RequestManager;->load(Landroid/graphics/drawable/Drawable;)Lcom/bumptech/glide/RequestBuilder;>
,SOURCE,<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestBuilder load(android.net.Uri)>,<Lcom/bumptech/glide/RequestManager;->load(Landroid/net/Uri;)Lcom/bumptech/glide/RequestBuilder;>
,SOURCE,<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestBuilder load(java.io.File)>,<Lcom/bumptech/glide/RequestManager;->load(Ljava/io/File;)Lcom/bumptech/glide/RequestBuilder;>
,SOURCE,<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestBuilder load(java.lang.Integer)>,<Lcom/bumptech/glide/RequestManager;->load(Ljava/lang/Integer;)Lcom/bumptech/glide/RequestBuilder;>
,SOURCE,<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestBuilder load(java.lang.Object)>,<Lcom/bumptech/glide/RequestManager;->load(Ljava/lang/Object;)Lcom/bumptech/glide/RequestBuilder;>
,SOURCE,<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestBuilder load(java.lang.String)>,<Lcom/bumptech/glide/RequestManager;->load(Ljava/lang/String;)Lcom/bumptech/glide/RequestBuilder;>
,SOURCE,<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestBuilder load(java.net.URL)>,<Lcom/bumptech/glide/RequestManager;->load(Ljava/net/URL;)Lcom/bumptech/glide/RequestBuilder;>
,SOURCE,<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestBuilder load(byte[])>,<Lcom/bumptech/glide/RequestManager;->load([B)Lcom/bumptech/glide/RequestBuilder;>
,SOURCE,<com.bumptech.glide.RequestManager: java.lang.Object load(android.graphics.Bitmap)>,<Lcom/bumptech/glide/RequestManager;->load(Landroid/graphics/Bitmap;)Ljava/lang/Object;>
,SOURCE,<com.bumptech.glide.RequestManager: java.lang.Object load(android.graphics.drawable.Drawable)>,<Lcom/bumptech/glide/RequestManager;->load(Landroid/graphics/drawable/Drawable;)Ljava/lang/Object;>
,SOURCE,<com.bumptech.glide.RequestManager: java.lang.Object load(android.net.Uri)>,<Lcom/bumptech/glide/RequestManager;->load(Landroid/net/Uri;)Ljava/lang/Object;>
,SOURCE,<com.bumptech.glide.RequestManager: java.lang.Object load(java.io.File)>,<Lcom/bumptech/glide/RequestManager;->load(Ljava/io/File;)Ljava/lang/Object;>
,SOURCE,<com.bumptech.glide.RequestManager: java.lang.Object load(java.lang.Integer)>,<Lcom/bumptech/glide/RequestManager;->load(Ljava/lang/Integer;)Ljava/lang/Object;>
,SOURCE,<com.bumptech.glide.RequestManager: java.lang.Object load(java.lang.Object)> ,<Lcom/bumptech/glide/RequestManager;->load(Ljava/lang/Object;)Ljava/lang/Object;>
,SOURCE,<com.bumptech.glide.RequestManager: java.lang.Object load(java.lang.String)>,<Lcom/bumptech/glide/RequestManager;->load(Ljava/lang/String;)Ljava/lang/Object;>
,SOURCE,<com.bumptech.glide.RequestManager: java.lang.Object load(java.net.URL)>,<Lcom/bumptech/glide/RequestManager;->load(Ljava/net/URL;)Ljava/lang/Object;>
,SOURCE,<com.bumptech.glide.RequestManager: java.lang.Object load(byte[])>,<Lcom/bumptech/glide/RequestManager;->load([B)Ljava/lang/Object;>
,SOURCE,<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestBuilder as(java.lang.Class)>,<Lcom/bumptech/glide/RequestManager;->as(Ljava/lang/Class;)Lcom/bumptech/glide/RequestBuilder;>
,SOURCE,<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestBuilder asBitmap()>,<Lcom/bumptech/glide/RequestManager;->asBitmap()Lcom/bumptech/glide/RequestBuilder;>
,SOURCE,<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestBuilder asDrawable()> ,<Lcom/bumptech/glide/RequestManager;->asDrawable()Lcom/bumptech/glide/RequestBuilder;>
,SOURCE,<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestBuilder asFile()>,<Lcom/bumptech/glide/RequestManager;->asFile()Lcom/bumptech/glide/RequestBuilder;>
,SOURCE,<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestBuilder asGif()>,<Lcom/bumptech/glide/RequestManager;->asGif()Lcom/bumptech/glide/RequestBuilder;>
,SOURCE,"<com.bumptech.glide.load.resource.bitmap.BitmapDrawableEncoder: boolean encode(com.bumptech.glide.load.engine.Resource<ndroid.graphics.drawable.BitmapDrawable>,java.io.File,com.bumptech.glide.load.Options)>",<Lcom/bumptech/glide/load/resource/bitmap/BitmapDrawableEncoder;->encode(Lcom/bumptech/glide/load/engine/Resource; Ljava/io/File; Lcom/bumptech/glide/load/Options;)Z>
React Native: Load images & Take pictures,SOURCE,"<com.reactnativecommunity.cameraroll: void getPhotos(com.facebook.react.bridge.ReadableMap,com.facebook.react.bridge.Promise)>",<Lcom/reactnativecommunity/cameraroll;->getPhotos(Lcom/facebook/react/bridge/ReadableMap; Lcom/facebook/react/bridge/Promise;)V>
,SOURCE,"<com.reactnativecommunity.cameraroll: void saveToCameraRoll(java.lang.String,com.facebook.react.bridge.ReadableMap,com.facebook.react.bridge.Promise)>",<Lcom/reactnativecommunity/cameraroll;->saveToCameraRoll(Ljava/lang/String; Lcom/facebook/react/bridge/ReadableMap; Lcom/facebook/react/bridge/Promise;)V>
,SOURCE,<com.imagepicker.ImagePickerModule: void launchCamera()>,<Lcom/imagepicker/ImagePickerModule;->launchCamera()V>
,SOURCE,<com.imagepicker.ImagePickerModule: void launchImageLibrary()>,<Lcom/imagepicker/ImagePickerModule;->launchImageLibrary()V>
,SOURCE,"<com.imagepicker.ImagePickerModule: void launchCamera(com.facebook.react.bridge.ReadableMap,com.facebook.react.bridge.Callback)>",<Lcom/imagepicker/ImagePickerModule;->launchCamera(Lcom/facebook/react/bridge/ReadableMap; Lcom/facebook/react/bridge/Callback;)V>
,SOURCE,"<com.imagepicker.ImagePickerModule: void launchImageLibrary(com.facebook.react.bridge.ReadableMap,com.facebook.react.bridge.Callback)>",<Lcom/imagepicker/ImagePickerModule;->launchImageLibrary(Lcom/facebook/react/bridge/ReadableMap; Lcom/facebook/react/bridge/Callback;)V>
,SOURCE,<com.imagepicker.ImagePickerModule: java.lang.String getBase64StringFromFile(java.lang.String)>,<Lcom/imagepicker/ImagePickerModule;->getBase64StringFromFile(Ljava/lang/String;)Ljava/lang/String;>
,SOURCE,<com.imagepicker.ImagePickerModule: java.io.File createFileFromURI(android.net.Uri)>,<Lcom/imagepicker/ImagePickerModule;->createFileFromURI(Landroid/net/Uri;)Ljava/io/File;>
Video,SOURCE,<android.media.MediaRecorder: void setVideoSource(int)>,<Landroid/media/MediaRecorder;->setVideoSource(I)V>
Media,SOURCE,<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)>,<Landroid/media/MediaRecorder;->setPreviewDisplay(Landroid/view/Surface;)V>
,SOURCE,<android.media.MediaRecorder: void start()>,<Landroid/media/MediaRecorder;->start()V>
Audio,SOURCE,"<android.media.AudioRecord: int read(short[],int,int)>",<Landroid/media/AudioRecord;->read([S I I)I>
,SOURCE,"<android.media.AudioRecord: int read(byte[],int,int)>",<Landroid/media/AudioRecord;->read([B I I)I>
,SOURCE,"<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)> ",<Landroid/media/AudioRecord;->read(Ljava/nio/ByteBuffer; I)I>
Hardware,SOURCE,<android.hardware.Camera: int CAMERA_ERROR_UNKNOWN> ,<Landroid/hardware/Camera;->CAMERA_ERROR_UNKNOWN>
,SOURCE,<android.hardware.Camera: int CAMERA_ERROR_SERVER_DIED>,<Landroid/hardware/Camera;->CAMERA_ERROR_SERVER_DIED>
,SOURCE,<android.hardware.Camera: java.lang.String ACTION_NEW_VIDEO> ,<Landroid/hardware/Camera;->ACTION_NEW_VIDEO>
,SOURCE,<android.hardware.Camera: java.lang.String ACTION_NEW_PICTURE>,<Landroid/hardware/Camera;->ACTION_NEW_PICTURE>
,SOURCE,"<android.hardware.SensorManager: void getRotationMatrixFromVector(float[],float[])>",<Landroid/hardware/SensorManager;->getRotationMatrixFromVector([F [F)V>
,SOURCE,"<android.hardware.SensorManager: float[] getOrientation(float[],float[])>",<Landroid/hardware/SensorManager;->getOrientation([F [F)[F>
,SOURCE,"<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])>",<Landroid/hardware/SensorManager;->getRotationMatrix([F [F [F [F)Z>
,SOURCE,<android.hardware.SensorManager: float LIGHT_SHADE>,<Landroid/hardware/SensorManager;->LIGHT_SHADE>
,SOURCE,<android.hardware.SensorManager: int AXIS_X>,<Landroid/hardware/SensorManager;->AXIS_X>
,SOURCE,<android.hardware.SensorManager: int AXIS_Y>,<Landroid/hardware/SensorManager;->AXIS_Y>
,SOURCE,<android.hardware.SensorManager: int AXIS_Z>,<Landroid/hardware/SensorManager;->AXIS_Z>
Bluetooth,SOURCE,<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>,<Landroid/bluetooth/BluetoothAdapter;->getAddress()Ljava/lang/String;>
Owasp,SOURCE,<org.owasp.webgoat.plugins.Plugin: void loadFiles(java.nio.file.Path)>,<Lorg/owasp/webgoat/plugins/Plugin;->loadFiles(Ljava/nio/file/Path;)V>
Apache,SOURCE,<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>,<Lorg/apache/http/HttpResponse;->getEntity()Lorg/apache/http/HttpEntity;>
,SOURCE,<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>,<Lorg/apache/http/util/EntityUtils;->toString(Lorg/apache/http/HttpEntity;)Ljava/lang/String;>
,SOURCE,<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>,<Lorg/apache/http/HttpResponse;->getStatusLine()Lorg/apache/http/StatusLine;>
SharedPreferences,SOURCE,<android.content.SharedPreferences: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>,<Landroid/content/SharedPreferences;->getDefaultSharedPreferences(Landroid/content/Context;)Landroid/content/SharedPreferences;>
Firebase,SOURCE,<com.google.firebase.ml.vision.common.FirebaseVisionImage: FirebaseVisionImage fromBitmap(android.graphics.Bitmap)>,<Lcom/google/firebase/ml/vision/common/FirebaseVisionImage;->fromBitmap(Landroid/graphics/Bitmap;)Lcom/google/firebase/ml/vision/common/FirebaseVisionImage;>
Reactnative,SOURCE,"<org.reactnative.camera.tflite.Classifier: List<Recognition> recognizeImage(android.graphics.Bitmap,int)> ",<Lorg/reactnative/camera/tflite/Classifier;->recognizeImage(Landroid/graphics/Bitmap; I)Ljava/util/List;>
SQL,SINK,<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>,<Landroid/database/sqlite/SQLiteDatabase;->execSQL(Ljava/lang/String;)V>
SharedPreferences,SINK,"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>",<Landroid/content/SharedPreferences$Editor;->putBoolean(Ljava/lang/String; Z)Landroid/content/SharedPreferences$Editor;>
,SINK,"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>",<Landroid/content/SharedPreferences$Editor;->putFloat(Ljava/lang/String; F)Landroid/content/SharedPreferences$Editor;>
,SINK,"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>",<Landroid/content/SharedPreferences$Editor;->putInt(Ljava/lang/String; I)Landroid/content/SharedPreferences$Editor;>
,SINK,"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>",<Landroid/content/SharedPreferences$Editor;->putLong(Ljava/lang/String; J)Landroid/content/SharedPreferences$Editor;>
,SINK,"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>",<Landroid/content/SharedPreferences$Editor;->putString(Ljava/lang/String; Ljava/lang/String;)Landroid/content/SharedPreferences$Editor;>
Logging,SINK,"<android.util.Log: int d(java.lang.String,java.lang.String)> ",<Landroid/util/Log;->d(Ljava/lang/String; Ljava/lang/String;)I>
,SINK,"<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>",<Landroid/util/Log;->d(Ljava/lang/String; Ljava/lang/String; Ljava/lang/Throwable;)I>
,SINK,"<android.util.Log: int e(java.lang.String,java.lang.String)> ",<Landroid/util/Log;->e(Ljava/lang/String; Ljava/lang/String;)I>
,SINK,"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",<Landroid/util/Log;->e(Ljava/lang/String; Ljava/lang/String; Ljava/lang/Throwable;)I>
,SINK,"<android.util.Log: int i(java.lang.String,java.lang.String)>",<Landroid/util/Log;->i(Ljava/lang/String; Ljava/lang/String;)I>
,SINK,"<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> ",<Landroid/util/Log;->i(Ljava/lang/String; Ljava/lang/String; Ljava/lang/Throwable;)I>
,SINK,"<android.util.Log: int v(java.lang.String,java.lang.String)>",<Landroid/util/Log;->v(Ljava/lang/String; Ljava/lang/String;)I>
,SINK,"<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>",<Landroid/util/Log;->v(Ljava/lang/String; Ljava/lang/String; Ljava/lang/Throwable;)I>
,SINK,"<android.util.Log: int w(java.lang.String,java.lang.Throwable)>",<Landroid/util/Log;->w(Ljava/lang/String; Ljava/lang/Throwable;)I>
,SINK,"<android.util.Log: int w(java.lang.String,java.lang.String)>",<Landroid/util/Log;->w(Ljava/lang/String; Ljava/lang/String;)I>
,SINK,"<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>",<Landroid/util/Log;->w(Ljava/lang/String; Ljava/lang/String; Ljava/lang/Throwable;)I>
,SINK,"<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>",<Landroid/util/Log;->wtf(Ljava/lang/String; Ljava/lang/Throwable;)I>
,SINK,"<android.util.Log: int wtf(java.lang.String,java.lang.String)>",<Landroid/util/Log;->wtf(Ljava/lang/String; Ljava/lang/String;)I>
,SINK,"<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>",<Landroid/util/Log;->wtf(Ljava/lang/String; Ljava/lang/String; Ljava/lang/Throwable;)I>
SD Card or internal sinks,SINK,<java.io.OutputStream: void write(byte[])>,<Ljava/io/OutputStream;->write([B)V>
,SINK,"<java.io.OutputStream: void write(byte[],int,int)void>",<Ljava/io/OutputStream;->write([B I I)V>
,SINK,<java.io.OutputStream: void write(int)>,<Ljava/io/OutputStream;->write(I)V>
,SINK,<java.io.FileOutputStream: void write(byte[])>,<Ljava/io/FileOutputStream;->write([B)V>
,SINK,"<java.io.FileOutputStream: void write(byte[],int,int)>",<Ljava/io/FileOutputStream;->write([B I I)V>
,SINK,<java.io.FileOutputStream: void write(int)>,<Ljava/io/FileOutputStream;->write(I)V>
,SINK,<java.io.Writer: void write(char[])>,<Ljava/io/Writer;->write([C)V>
,SINK,"<java.io.Writer: void write(char[],int,int)>",<Ljava/io/Writer;->write([C I I)V>
,SINK,<java.io.Writer: void write(int)> ,<Ljava/io/Writer;->write(I)V>
,SINK,<java.io.Writer: void write(java.lang.String)>,<Ljava/io/Writer;->write(Ljava/lang/String;)V>
,SINK,"<java.io.Writer: void write(java.lang.String,int,int)>",<Ljava/io/Writer;->write(Ljava/lang/String; I I)V>
,SINK,<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>,<Ljava/io/Writer;->append(Ljava/lang/CharSequence;)Ljava/io/Writer;>
,SINK,<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)>,<Ljava/io/OutputStreamWriter;->append(Ljava/lang/CharSequence;)Ljava/io/Writer;>
SMS sinks,SINK,"<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>",<Landroid/telephony/SmsManager;->sendTextMessage(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String; Landroid/app/PendingIntent; Landroid/app/PendingIntent;)V>
,SINK,"<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>",<Landroid/telephony/SmsManager;->sendDataMessage(Ljava/lang/String; Ljava/lang/String; S [B Landroid/app/PendingIntent; Landroid/app/PendingIntent;)V>
,SINK,"<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>",<Landroid/telephony/SmsManager;->sendMultipartTextMessage(Ljava/lang/String; Ljava/lang/String; Ljava/util/ArrayList; Ljava/util/ArrayList; Ljava/util/ArrayList;)V>
Network,SINK,"<org.apache.xmlrpc.webserver.XmlRpcServletServer: void setResponseHeader(org.apache.xmlrpc.common.ServerStreamConnection,java.lang.String,java.lang.String)>",<Lorg/apache/xmlrpc/webserver/XmlRpcServletServer;->setResponseHeader(Lorg/apache/xmlrpc/common/ServerStreamConnection; Ljava/lang/String; Ljava/lang/String;)V>
,SINK,"<org.apache.xmlrpc.webserver.XmlRpcServletServer: void execute(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ",<Lorg/apache/xmlrpc/webserver/XmlRpcServletServer;->execute(Ljavax/servlet/http/HttpServletRequest; Ljavax/servlet/http/HttpServletResponse;)V>
,SINK,"<org.apache.xmlrpc.webserver.ServletOutputStreamImpl: void write(byte[],int,int)>",<Lorg/apache/xmlrpc/webserver/ServletOutputStreamImpl;->write([B I I)V>
,SINK,"<org.apache.xmlrpc.webserver.ConnectionServer: void writeResponse(org.apache.xmlrpc.common.XmlRpcStreamRequestConfig,java.io.OutputStream,java.lang.Object)>",<Lorg/apache/xmlrpc/webserver/ConnectionServer;->writeResponse(Lorg/apache/xmlrpc/common/XmlRpcStreamRequestConfig; Ljava/io/OutputStream; Ljava/lang/Object;)V>
,SINK,<org.apache.xmlrpc.webserver.WebServer: void setParanoid(boolean)>,<Lorg/apache/xmlrpc/webserver/WebServer;->setParanoid(Z)V>
,SINK,"<org.apache.xmlrpc.webserver.Connection: void writeResponseHeader(org.apache.xmlrpc.webserver.RequestData,int)> ",<Lorg/apache/xmlrpc/webserver/Connection;->writeResponseHeader(Lorg/apache/xmlrpc/webserver/RequestData; I)V>
,SINK,<org.apache.xmlrpc.server.XmlRpcServerWorker: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)>,<Lorg/apache/xmlrpc/server/XmlRpcServerWorker;->execute(Lorg/apache/xmlrpc/XmlRpcRequest;)Ljava/lang/Object;>
,SINK,"<org.owasp.webgoat.HammerHead: void log(javax.servlet.http.HttpServletRequest,java.lang.String)>",<Lorg/owasp/webgoat/HammerHead;->log(Ljavax/servlet/http/HttpServletRequest; Ljava/lang/String;)V>
,SINK,<org.owasp.webgoat.session.LessonSession: void setAuthenticated(boolean)>,<Lorg/owasp/webgoat/session/LessonSession;->setAuthenticated(Z)V>
,SINK,"<org.owasp.webgoat.session.WebSession: void update(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>",<Lorg/owasp/webgoat/session/WebSession;->update(Ljavax/servlet/http/HttpServletRequest; Ljavax/servlet/http/HttpServletResponse; Ljava/lang/String;)V>
,SINK,"<org.springframework.web.socket.server.support.WebSocketHttpRequestHandler: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>",<Lorg/springframework/web/socket/server/support/WebSocketHttpRequestHandler;->handleRequest(Ljavax/servlet/http/HttpServletRequest; Ljavax/servlet/http/HttpServletResponse;)V>
,SINK,<org.springframework.web.socket.adapter.standard.StandardWebSocketSession: void sendTextMessage(org.springframework.web.socket.TextMessage)>,<Lorg/springframework/web/socket/adapter/standard/StandardWebSocketSession;->sendTextMessage(Lorg/springframework/web/socket/TextMessage;)V>
,SINK,<analysis.MethodAnalysis Lcom/facebook/react/bridge/Inspector$LocalConnection;->sendMessage(Ljava/lang/String;)V [access_flags=public native] @ 0x0>,<Lorg/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator;->sendMessage(Lorg/springframework/web/socket/WebSocketMessage;)V>
,SINK,"<org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession: void handleMessage(org.springframework.web.socket.TextMessage,org.springframework.web.socket.WebSocketSession)>",<Lorg/springframework/web/socket/sockjs/transport/session/WebSocketServerSockJsSession;->handleMessage(Lorg/springframework/web/socket/TextMessage; Lorg/springframework/web/socket/WebSocketSession;)V>
,SINK,<org.apache.http.impl.conn.DefaultClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>,<Lorg/apache/http/impl/conn/DefaultClientConnection;->sendRequestHeader(Lorg/apache/http/HttpRequest;)V>
,SINK,<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>,<Lorg/apache/http/impl/client/DefaultHttpClient;->execute(Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;>
,SINK,<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>,<Lorg/apache/http/client/HttpClient;->execute(Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;>
,SINK,<com.github.scribejava.core.oauth.OAuth20Service: com.github.scribejava.core.model.OAuth2AccessToken sendAccessTokenRequestSync(com.github.scribejava.core.model.OAuthRequest)>,<Lcom/github/scribejava/core/oauth/OAuth20Service;->sendAccessTokenRequestSync(Lcom/github/scribejava/core/model/OAuthRequest;)Lcom/github/scribejava/core/model/OAuth2AccessToken;>
,SINK,"<com.github.scribejava.core.oauth.OAuth20Service: java.util.concurrent.Future sendAccessTokenRequestAsync(com.github.scribejava.core.model.OAuthRequestAsync,com.github.scribejava.core.model.OAuthAsyncRequestCallback)>",<Lcom/github/scribejava/core/oauth/OAuth20Service;->sendAccessTokenRequestSync(Lcom/github/scribejava/core/model/OAuthRequestAsync; Lcom/github/scribejava/core/model/OAuthAsyncRequestCallback;)Ljava/util/concurrent/Future;>
,SINK,<javax.servlet.http.HttpServletResponseWrapper: void sendRedirect(java.lang.String)>,<Ljavax/servlet/http/HttpServletResponseWrapper;->sendRedirect(Ljava/lang/String;)V>
,SINK,<java.net.URLConnection: void connect()>,<Ljava/net/URLConnection;->connect()V>
,SINK,<java.net.Socket: void connect(java.net.SocketAddress)>,<Ljava/net/Socket;->connect(Ljava/net/SocketAddress;)V>
,SINK,<android.os.Handler: boolean sendMessage(android.os.Message)>,<Landroid/os/Handler;->sendMessage(Landroid/os/Message;)Z>
,SINK,"<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> ",<Ljava/net/URL;->set(Ljava/lang/String; Ljava/lang/String; I Ljava/lang/String; Ljava/lang/String;)V>
,SINK,"<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",<Ljava/net/URL;->set(Ljava/lang/String; Ljava/lang/String; I Ljava/lang/String; Ljava/lang/String; Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;)V>
,SINK,<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>,<Lorg/apache/http/util/EntityUtils;->toString(Lorg/apache/http/HttpEntity;)Ljava/lang/String;>
,SINK,<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)> ,<Lorg/apache/http/util/EntityUtils;->toByteArray(Lorg/apache/http/HttpEntity;)[B>
,SINK,"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)>",<Lorg/apache/http/util/EntityUtils;->toString(Lorg/apache/http/HttpEntity; Ljava/lang/String;)Ljava/lang/String;>
,SINK,<org.apache.http.util.EntityUtils: java.lang.String getContentCharSet(org.apache.http.HttpEntity)>,<Lorg/apache/http/util/EntityUtils;->getContentCharSet(Lorg/apache/http/HttpEntity;)Ljava/lang/String;>
Firebase,SINK,<com.google.firebase.ml.vision.FirebaseVision: FirebaseVisionFaceDetector getVisionFaceDetector(FirebaseVisionFaceDetectorOptions)>,<Lcom/google/firebase/ml/vision/FirebaseVision;->getVisionFaceDetector(Lcom/google/firebase/ml/vision/face/FirebaseVisionFaceDetectorOptions;)Lcom/google/firebase/ml/vision/face/FirebaseVisionFaceDetector;>
